@model ECommerceProject1.ViewModel.ProductViewModel

@{
    ViewBag.Title = "Create";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h2><b>Product Administration</b></h2>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ImageUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.ImageUrl, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ImageUrl, "", new { @class = "text-danger" })
            </div>
          
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.Size, htmlAttributes: new { @class = "control-label col-md-2" })*@
        <div class="form-group">
            @Html.LabelFor(model => model.Size, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <!-- Size selection checkboxes -->
                <div class="checkbox-inline">
                    <label>
                        <input type="checkbox" class="size-checkbox" name="IsSSelected" value="S" /> S
                    </label>
                </div>
                <div class="checkbox-inline">
                    <label>
                        <input type="checkbox" class="size-checkbox" name="IsMSelected" value="M" /> M
                    </label>
                </div>
                <div class="checkbox-inline">
                    <label>
                        <input type="checkbox" class="size-checkbox" name="IsLSelected" value="L" /> L
                    </label>
                </div>
                <div class="checkbox-inline">
                    <label>
                        <input type="checkbox" class="size-checkbox" name="IsXLSelected" value="XL" /> XL
                    </label>
                </div>
                <div class="checkbox-inline">
                    <label>
                        <input type="checkbox" class="size-checkbox" name="IsXXLSelected" value="XXL" /> XXL
                    </label>
                </div>

                <!-- Hidden input to store selected sizes as a comma-separated string -->
                @Html.HiddenFor(model => model.Size)
            </div>
        </div>
        @*</div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.Colour, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Colour, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Colour, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Availability, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Availability, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Availability, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CategoryId, "Select a Category", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CategoryId, Model.Categories, "Select a category", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
    <script>class SizeManager {
            constructor() {
                this.sizeInput = document.querySelector('#Size');

                // Attach event listeners to checkboxes
                const checkboxes = document.querySelectorAll('.size-checkbox');
                checkboxes.forEach(checkbox => {
                    checkbox.addEventListener('change', () => this.updateSelectedSizes());
                });

                // Initialize selected sizes
                this.updateSelectedSizes();
            }

            updateSelectedSizes() {
                const selectedSizes = [];

                // Loop through the checkboxes and check if they are selected
                const checkboxes = document.querySelectorAll('.size-checkbox');
                checkboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        selectedSizes.push(checkbox.value);
                    }
                });

                // Set the model.size property with the selected sizes as a comma-separated string
                this.sizeInput.value = selectedSizes.join(',');
            }
        }

        // Initialize the SizeManager
        const sizeManager = new SizeManager();
    </script>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
